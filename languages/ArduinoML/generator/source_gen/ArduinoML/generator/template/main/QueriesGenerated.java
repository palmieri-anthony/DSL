package ArduinoML.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

@Generated
public class QueriesGenerated {
  public final boolean NEEDS_OPCONTEXT = false;

  public static Object propertyMacro_GetPropertyValue_1895809058299489599(final PropertyMacroContext _context) {
    return SPropertyOperations.getString_def(_context.getNode(), "expected", "HIGH");
  }

  public static Object referenceMacro_GetReferent_1895809058299483345(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "component", false);
  }

  public static Object referenceMacro_GetReferent_1895809058299611615(final ReferenceMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getNode(), "ArduinoML.structure.ArduinoML", false, false), "modules", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(SPropertyOperations.getString(_context.getNode(), "name"));
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_1895809058299482424(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "conditions", true);
  }

  public static void mappingScript_CodeBlock_1895809058299577114(final MappingScriptContext _context) {
    SNode program = ListSequence.fromList(SModelOperations.getNodes(_context.getModel(), "ArduinoML.structure.ArduinoML")).first();
    List<SNode> exeptions = SModelOperations.getNodes(_context.getModel(), "ArduinoML.structure.Exception");
    for (SNode ex : ListSequence.fromList(exeptions)) {
      SPropertyOperations.set(ex, "name", _context.createUniqueName("exception", program));
      SNode moduleException = SConceptOperations.createNewNode("ArduinoML.structure.Module", null);
      SPropertyOperations.set(moduleException, "name", SPropertyOperations.getString(ex, "name"));
      ListSequence.fromList(SLinkOperations.getTargets(program, "modules", true)).addElement(moduleException);

      SNode decisionException = SConceptOperations.createNewNode("ArduinoML.structure.Decision", null);
      SNode condition = SConceptOperations.createNewNode("ArduinoML.structure.Condition", null);
      SLinkOperations.setTarget(condition, "component", SLinkOperations.getTarget(program, "componentException", true), false);
      SPropertyOperations.set(condition, "expected", "LOW");
      ListSequence.fromList(SLinkOperations.getTargets(decisionException, "conditions", true)).addElement(condition);


      for (int i = 0; i < SPropertyOperations.getInteger(ex, "numError"); i++) {
        SNode ledHigh = SConceptOperations.createNewNode("ArduinoML.structure.ActionOnComponent", null);
        SPropertyOperations.set(ledHigh, "target", "HIGH");
        SLinkOperations.setTarget(ledHigh, "component", SLinkOperations.getTarget(program, "componentException", true), false);

        SNode ledLow = SConceptOperations.createNewNode("ArduinoML.structure.ActionOnComponent", null);
        SPropertyOperations.set(ledLow, "target", "LOW");
        SLinkOperations.setTarget(ledLow, "component", SLinkOperations.getTarget(program, "componentException", true), false);

        SNode break1 = SConceptOperations.createNewNode("ArduinoML.structure.Break", null);
        SPropertyOperations.set(break1, "timeInMilliSecondes", "" + (1000));
        SNode break2 = SConceptOperations.createNewNode("ArduinoML.structure.Break", null);
        SPropertyOperations.set(break2, "timeInMilliSecondes", "" + (1000));

        ListSequence.fromList(SLinkOperations.getTargets(decisionException, "actions", true)).addElement(ledHigh);
        ListSequence.fromList(SLinkOperations.getTargets(decisionException, "actions", true)).addElement(break1);
        ListSequence.fromList(SLinkOperations.getTargets(decisionException, "actions", true)).addElement(ledLow);
        ListSequence.fromList(SLinkOperations.getTargets(decisionException, "actions", true)).addElement(break2);
      }

      SNode finalBreak = SConceptOperations.createNewNode("ArduinoML.structure.Break", null);
      SPropertyOperations.set(finalBreak, "timeInMilliSecondes", "" + (1000));
      ListSequence.fromList(SLinkOperations.getTargets(decisionException, "actions", true)).addElement(finalBreak);

      SNode callModule = SConceptOperations.createNewNode("ArduinoML.structure.ActionCallModule", null);
      SLinkOperations.setTarget(callModule, "moduleToCall", moduleException, false);
      ListSequence.fromList(SLinkOperations.getTargets(decisionException, "actions", true)).addElement(callModule);
      ListSequence.fromList(SLinkOperations.getTargets(moduleException, "rules", true)).addElement(decisionException);

    }

  }

  public static void mappingScript_CodeBlock_3276207124036642494(final MappingScriptContext _context) {
    SNode arduinoML = ListSequence.fromList(SModelOperations.getNodes(_context.getModel(), "ArduinoML.structure.ArduinoML")).first();
    ListSequence.fromList(SLinkOperations.getTargets(arduinoML, "components", true)).addElement(SLinkOperations.getTarget(arduinoML, "componentException", true));
  }
}
