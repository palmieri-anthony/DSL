package ArduinoML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class ArduinoML_Constraints extends BaseConstraintsDescriptor {
  public ArduinoML_Constraints() {
    super("ArduinoML.structure.ArduinoML");
  }

  @Override
  public boolean hasOwnCanBeParentMethod() {
    return true;
  }

  @Override
  public boolean canBeParent(SNode node, @Nullable SNode childNode, SNode childConcept, SNode link, IOperationContext operationContext, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAParent(node, childNode, childConcept, link, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {
    boolean result = ListSequence.fromList(SLinkOperations.getTargets(node, "modules", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals("mainly");
      }
    });
    if ((SLinkOperations.getTarget(node, "componentException", true) != null)) {
      return result & ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "componentException", true), "pins", true)).count() == 1;
    }
    return result;
  }

  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:c81f7f6a-863d-45a6-9a7e-364c77b5bb16(ArduinoML.constraints)", "1895809058295326200");
}
