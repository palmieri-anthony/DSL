package ArduinoML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;

public class ActionOnComponent_Constraints extends BaseConstraintsDescriptor {
  public ActionOnComponent_Constraints() {
    super("ArduinoML.structure.ActionOnComponent");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("pinTarget", new BaseReferenceConstraintsDescriptor("pinTarget", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_aez20v_a0a0a0a0a1a0b0a1a1;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SimpleRoleScope.forNamedElements(SLinkOperations.getTarget(_context.getReferenceNode(), "component", false), SLinkOperations.findLinkDeclaration("ArduinoML.structure.ComponentOUT", "pins"));
          }
        };
      }
    });
    references.put("component", new BaseReferenceConstraintsDescriptor("component", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_aez20v_a0a0a0a0a1a0b0a2a1;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SimpleRoleScope.forNamedElements(SNodeOperations.getAncestor(_context.getEnclosingNode(), "ArduinoML.structure.ArduinoML", false, false), SLinkOperations.findLinkDeclaration("ArduinoML.structure.ArduinoML", "components"));
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_aez20v_a0a0a0a0a1a0b0a1a1 = new SNodePointer("r:c81f7f6a-863d-45a6-9a7e-364c77b5bb16(ArduinoML.constraints)", "1695169151241593344");
  private static SNodePointer breakingNode_aez20v_a0a0a0a0a1a0b0a2a1 = new SNodePointer("r:c81f7f6a-863d-45a6-9a7e-364c77b5bb16(ArduinoML.constraints)", "1695169151242172444");
}
